{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","errors","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","handleValidation","props","onAdd","resetForm","this","isValid","push","test","onSubmit","type","placeholder","onChange","class","error","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca77fa9e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    errors: []\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.handleValidation()) {\n      this.props.onAdd(this.state);\n\n      this.resetForm();\n    }\n  }\n\n  resetForm = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  }\n\n  handleValidation() {\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId\n    } = this.state;\n    \n    const errors = [];\n\n    let isValid = true;\n\n    if (!title) {\n      isValid = false;\n      errors.push('Title is empty');\n    }\n\n    if (!imgUrl) {\n      isValid = false;\n      errors.push('Image URL is empty');\n    }\n\n    if (!imdbUrl) {\n      isValid = false;\n      errors.push('IMDB URL is empty');\n    }\n\n    if (!imdbId) {\n      isValid = false;\n      errors.push('IMDB ID is empty');\n    }\n\n    // eslint-disable-next-line\n    if (!/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/.test(imdbUrl)) {\n      isValid = false;\n      errors.push('IMDB URL is not valid');\n    }\n\n    // eslint-disable-next-line\n    if (!/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/.test(imdbId)) {\n      isValid = false;\n      errors.push('IMDB ID is not valid');\n    }\n\n    this.setState({\n      errors,\n    });\n\n    return isValid;\n  }\n\n  render() {\n    const { title, description, imgUrl, imdbUrl, imdbId, errors } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={this.handleChange}\n        />\n\n        <input\n          type=\"text\"\n          name=\"description\"\n          placeholder=\"Description\"\n          value={description}\n          onChange={this.handleChange}\n        />\n\n        <input\n          type=\"text\"\n          name=\"imgUrl\"\n          placeholder=\"Image URL\"\n          value={imgUrl}\n          onChange={this.handleChange}\n        />\n\n        <input\n          type=\"text\"\n          name=\"imdbUrl\"\n          placeholder=\"IMDB URL\"\n          value={imdbUrl}\n          onChange={this.handleChange}\n        />\n\n        <input\n          type=\"text\"\n          name=\"imdbId\"\n          placeholder=\"IMDB ID\"\n          value={imdbId}\n          onChange={this.handleChange}\n        />\n\n        <ol class=\"errors\">\n         {errors.map(error => (\n           <li>{error}</li>\n         ))}\n        </ol>\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}